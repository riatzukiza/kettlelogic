// Generated by LispyScript v1.0.0
var lib = require('lib');
var curry = lib.functional.partial.curry;
var defer = lib.functional.partial.defer;
var express = require("express");
var app = express();
var Path = require("path");
var http = (require('http')).Server(app);
var io = require("socket.io")(http);
var lib = require("lib");
var maybe = lib.functional.logical.maybe;
var is = lib.functional.predicates;
var Inode = lib.filesystem;
function Monad(mv) {
    return function unit(mf) {
        return function bind() {
            return mf.call(bind,mv,...arguments);
        }
    }
}
function DoMonad() {
    var fns = [...arguments];
    return function(bind) {
        return ((fns).map(bind)).reduce(function(scope,m) {
            m(scope);
            return scope;
        },{});
    };
}
var print = console.log.bind(console);
function defPrint() {
    return defer(print,[...arguments]);
}
function openIO(dir,scope) {
    scope.sessions = {};
    return io.on("connection",function(socket) {
        print("user connected");
        var emit = socket.emit.bind(socket);
        scope.sessions[socket.id] = socket;
        socket.once("disconnect",defer(print,["user disconnected"]));
        return dir.on("*",emit);
    });
}
function startHttpServer(dir,scope) {
    (app).use(express.static("./static"));
    return http.listen(8080,defPrint("http server listening on port 8080"));
}
function watchInode(dir,scope) {
    return dir.watch();
}
((Inode.get("./static")).then(Monad)).then(DoMonad(openIO,startHttpServer,watchInode));

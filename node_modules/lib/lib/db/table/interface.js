"use strict";
const evented = require("lib/lib/events/eventedInterface.js");
const Evented = require("lib/lib/events/EventInterface.js");
//////////////////////////////////////////////////////////////////
function resultsOnly(m, c) {
    return TableInterface
        .extend(m, c || TableInterface)
        .afterAll(function(r) {
            return r[1];
        });
}

function capitalize(s) {
    return s[0].toUpperCase() + s.slice(1);
};
const TableInterface = Evented
        .evented({
            /**
            * add an object to the SQL table useing the keys as the
            * name of the field and the property values as the
            * cells value.
            * @param {object} data
            * */
            add(data) {
                var keys = Object.keys(data);
                return this.table.insert(keys, keys.map(k => data[k]));
            },
            /**
            * update an sql table, accepts two objects,
            * a value and a constraint
            * @param {object} values
            * @param {object} constriaints
            * */
            modify(v, c) {
                return this.table.update(v, c);
            },
            /**
             * select elements in a table by column
             * @param {string} column Name of column to use as constraint.
             * @param {string} id Value to look for with in column fields.
             **/
            getBy: function(col, id) {
                return this.table.selectWhere({
                    [col]: id
                });
            },
            setBy:function(constraintCol,constraintValue,valueCol,value) {
                return this.modify.modify({
                    [valueCol]:value
                },{
                    [constraintCol]:constraintValue
                });
            },
            /**
            * get all values from an sql table.
            * */
            getAll() {
                return this.table.selectAll();
            },
        })
        .Constructor(function SQLTableInterface(name, schema, db) {
            ////////////////////////////////////////////////////////////////////
            Evented.call(this, ...arguments);
            this.schema = schema;
            this.name = name;
            this._ready = false;
            this._pending = [];
            this.db = db;
            ////////////////////////////////////////////////////////////////////
            this.schema._cols.forEach((v, k) => {
                var gn = "getBy" + capitalize(k);
                var sn = "setBy" + capitalize(k);

                this[gn] = function(name) {
                    return this.getBy(k, name)
                        .then((r) => (this.emit(gn,r),r));
                };
                this[sn] = function(name,vn,v) {
                    return this.setBy(k, name,vn,v)
                        .then((r) => (this.emit(sn,r),r));
                };
            });
            ////////////////////////////////////////////////////////////////////
            this.table = db.createTable(
                name,
                this.schema._cols.o,
                this.schema._constraints);
            ////////////////////////////////////////////////////////////////////
        });
module.exports = TableInterface;

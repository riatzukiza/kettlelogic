"use strict";
const Schema = require("./schema.js");

var junctionProcs = {
    /**
     * relate elements of the two tables this is a junction between
     * */
    addRelation(t1, t2) {
        return this.table.insert([
            this.schema.tables[0],
            this.schema.tables[1]
        ], [t1, t2]);
    },
    /**
     * retrieve a list of all elements related to an element of the named table.
     * */
    getRelation(name, value) {
        return this.table.selectWhere({[name]: value});
    },
    /**
     * remove a relation between the two tables.
     * */
    removeRelation(id1, id2) {
        return this.table.delete({
            [this.schema.tables[0]]: id1,
            [this.schema.tables[1]]: id2
        });
    },
    checkMembership(id1,id2) {
        return this.table.selectWhere({
            [this.schema.tables[0]]:id1,
            [this.schema.tables[1]]:id2
        })
    },
    removeMember(name,id) {
        console.log
        ("removing references to",id,"in table",name)
        return this.table.delete({
            [name]:id
        })
    }
}
/**
 * an sql schema fragment for junctions between sql tables.
 * */
var Junction = Schema.extend({},function(t1,t2) {
    Schema.call(this,{
        [t1]: ['int'],
        [t2]: ['int']
    },junctionProcs,[
`CONSTRAINT ${t1}to${t2}
    FOREIGN KEY (${t1})
    REFERENCES ${t1}(id)`,
`CONSTRAINT ${t2}to${t1}
    FOREIGN KEY (${t2})
    REFERENCES ${t2}(id)`,
//`UNIQUE(${t2}to${t1})`,
//`UNIQUE(${t1}to${t2})`,
    ])
    this.tables = [t1,t2];
});
module.exports = Junction;

"use strict";
const TableInterface = require("../table/interface.js");
const Interface = require("../../interface.js").Interface;
const obj = require("../../wrappers/object.js");
const is = require("../../functional/predicates.js")
const Schema = Interface.methods({
    /**
     * creates a new table from the generated schema.
     * */
    create(name, db,cons) {
        console.log("creating table",this._procedures.o)
        var schema = this;
        var schemadInterface = TableInterface
                .methods(this._procedures.o)
                .Constructor(function() {
                    TableInterface.call(this, name,schema,db);
                    if(is.function(cons)) {
                        cons.call(this,...arguments)
                    }
                });
        return new schemadInterface(name, this, db);
    },
    /**
     * return a constructor for a TableInterface that has this schema.
     */
    build(name, db,cons) {
        var schema = this;
        var schemadInterface =
            TableInterface
                .extend(this._procedures.o,
                function() {
                    TableInterface.call(this, name, schema,db);
                    if(is.function(cons)) {
                        cons.call(this,...arguments)
                    }
                });
        return schemadInterface;
    },
    /**
     * returns a product of this schema and another one.
     * */
    merge(schema) {
        return this
            .fields(schema._cols.o)
            .procs(schema._procedures.o)
            .constraints(schema._constraints)
    },
    /**
     * create a new schema with the given colums extending the own coulums of this schema
     * */
    fields(cols) {
        return new Schema(this._cols.extend(cols), this._procedures, this._constraints);
    },
    /**
     * create a new schema with the given procedures extending the own procedures of this schema
     * */
    procs(procedures) {
        return new Schema(this._cols, this._procedures.extend(procedures), this._constraints);
    },
    /**
     * create a new schema with the given constraints appended to the constraints of this schema.
     * */
    constraints(c) {
        return new Schema(this._cols, this._procedures, this._constraints.concat(c));
    }
}).Constructor(function Schema(cols, procedures, constraints) {
    this._cols = obj.mask(cols || {});
    this._procedures = obj.mask(procedures || {});
    this._constraints = constraints || [];
})
module.exports = Schema;

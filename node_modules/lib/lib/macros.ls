;; syntax sugar for variable statements.
(macro let (name v)
    (var ~name ~v))
;; syntax sugar for anonymous function declaration
(macro lambda (args rest...)
    (function ~args ~rest...))
;; syntax sugar for named function declaration
(macro defun (name args rest...)
     (function ~name ~args ~rest...))

;; syntax sugar for functions curried by default.
(macro curried (name args rest...)
    (let ~name (curry (defun ~name ~args ~rest...))))

(macro overloadedHomList (...rest)
    ((hom #args-shift rest...)
        (#args-if rest... (overloadedHomList(~rest...)))))
(macro overloaded (rest...)
    (let (#args-shift ...rest) adhochom (overloadedomList ~rest...)))

;a method list is an object of functions created by the object keyword

(macro req (name path)
       (let ~name (require path)))
;; macro for constructors, creations a function that returns this.
(macro constructor (args rest...)
       (function ~args ~rest... this))
;; syntax sugar for creating evented interfaces.
;(macro evented (name o con)
;       (let ~name (eventedInterface ~o ~con)))
;(macro quoteRest (first rest...)
;       (#args-if rest... ))
;(macro arrQuote (a rest...))
;(macro => (args rest...)
;       (javascript
;        (str "(" ") => {\n" (quote ~rest...)"}")))

;(=> (a b c) (console.log "a" a)(console.log "b" b))

;(var x (quote (function (a)(console.log 'foobar'))))
;(quote a)
;(console.log "foo" "bar")
;(javascript (function (a)(console.log 'foobar')))
;(var y (quote foobar))
;(var z (str "a" "b" "c"))
;(var a (str ""))
;(javascript (quote (function (a)(console.log 'foobar'))))
;(javascript (str "foobar"))

;; require libraries nessisary for the above macros to function.
;(let eventedInterface (require 'lib/events/eventedInterface.js'))
;;;evented example
;(evented foobar
;         (object
;          moose (lambda (a b c)
;                  (console.log 'balls'))
;          cow (lambda (a b c)
;                (console.log 'balls'))
;          nipples (lambda (a b c)
;                    (console.log 'dick cakes')))
;         (constructor(a)(set this.a a)))


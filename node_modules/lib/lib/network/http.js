"use strict";
require("./global.js");
var https = require("https");
var prom = require("../wrappers/promise.js");
var http = require("http");
var URL = require("url");
var is = require("../functional/predicates.js");
var maybe = require("../functional/logical.js").maybe.binary;
var cond = require("../functional/logical.js").conditional;
var handleResponse = curry(function handleResponse(target, resolve, reject, res) {
    //console.log("request",target._opts);
    var s = "";
    //console.log("STATUS CODE",res.statusCode);
    res.once("error", reject);
    res.on("data", (d) => {
        s += d;
    });
    res.once("end", () => {
        //console.log( "STATUS", res.statusCode, target._url );
        if (res.statusCode === 200) {
            resolve(s);
        } else {
            reject(new Error(s));
        }
    });
    //res.on("data",console.log.bind(console,"data from",target._url));
});
class HttpRequest {
    constructor(url, headers) {
        this._url = url;
        this._opts = URL.parse(url);
        this._headers = headers;
        this._opts.headers = headers;
        //this._opts.protocol = this._opts.protocol.slice(0,-1);
    }
    sendJSON(msg) {
        //console.log("sending JSON message",msg);
        return this.send(is.maybe.object(
                msg, JSON.stringify,
                (x) => x))
            .then((s) => {
                return JSON.parse(s);
            });
    }
    send(msg) {
        return prom.create((resolve, reject) => {
            if (this._opts.protocol === "https:") {
                var req = https.request(this._opts, handleResponse(this, resolve, reject));
            } else {
                var req = http.request(this._opts, handleResponse(resolve, reject));
            }
            req.on("error", reject)
                .end(msg || "");
        });
    }
    sendStream(stream) {
        return prom.create((resolve, reject) => {
            stream.once('error', reject)
                .pipe(https.request(this._opts, resolve)
                    .once("error", reject));
        });
    }
    static create(url, headers) {
        return new HttpRequest(url, headers);
    }
}
module.exports = HttpRequest;

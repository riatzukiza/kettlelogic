var express = require("express");
var is = require("../../functional/predicates.js");
var interface = require("../../interface.js");
var evented = require("../../events/eventedInterface.js");
var Evented = require("../../events/EventInterface.js")
var List = require("../../datastructures/DoublyLinkedList.js").DoublyLinkedList;
var Interface = interface.Interface;
var InterfaceMethod = interface.InterfaceMethod;
var createInterface = interface.createInterface;

var Route = Evented
        .Constructor(function() {
            Evented.call(this);
            this._method = new List([]);
            var self = this;
        })
        .fluent({
            end:function() {
                this.then(function(value,args) {
                    self.emit("end",value,args)
                });
            },
            start:function(value,args) {
                this.emit("start",value);
                console.log("starting with",value);
                console.log("going from",this._method.head.next.value)
                this._method.head.next.value(value,args,this._method.head.next);
            },
            apply:function() {
                return this.start.apply(this,arguments);
            },
            call:function(value) {
                return this.start.call(this,value,...arguments);
            },
            before:function(f) {
                var listElement = this._method
                        .push_head((value,args) =>{
                            this.emit("next")
                            return Promise.resolve(f.call(this,value,args,listElement));
                        });
            },
            push:function(f) {
                var listElement = this._method
                        .push_tail((value,args) =>{
                            this.emit("next",value,args,listElement);
                            console.log("NEXT");
                            return Promise.resolve(f.call(this,value,args,listElement));
                        });
            },
            bind:function(f) {
                return this.push(function(value,args,e) {
                    return Promise.resolve(value).then((v) => {
                        return e.next.value(f.call(this,v,args),args,e.next);
                    });
                });
            },
            then:function(f) {
                return this.bind(f);
            },
            catch:function(f) {
                return this.push(function(value,args,e) {
                    return value.catch((err) => {
                        return e.next.value(f.call(this,err,args),args,e.next);
                    });
                });
            },
            conditional:function(condition) {
                this
                    .push(function(value,args,context) {
                        return value
                            .then(condition)
                            .then((c) => {
                                if(c) {
                                    return context.next.value(value,args,{
                                        prev:context.prev,
                                        next:context.next.next
                                    });
                                } else {
                                    return context.next.next.value(value,args,{
                                        prev:context.prev,
                                        next:context.next.next
                                    });
                                }
                            });
                    })
            }
        });
module.exports = Route;

var express = require("express");
var is = require("../../functional/predicates.js");
var interface = require("../../interface.js");
var evented = require("../../events/eventedInterface.js");
var Evented = require("../../events/EventInterface.js")
var List = require("../../datastructures/DoublyLinkedList.js");
var Interface = interface.Interface;
var InterfaceMethod = interface.InterfaceMethod;
var createInterface = interface.createInterface;
var HttpRoute = require("./http-route.js");
var Path = require("path");

var HttpServer = Evented
        .Constructor(function HttpServerInterface() {
            Evented.call(this);
            this.app = express();
            this.routes = new Map();
            this.app
                .use((req,res,next)=> {
                    console.log("REQUEST")
                    this.emit('request',req.url,req,res);
                    next();
                });
            this.app
                .get((req,res,next) => {
                    console.log("GET");
                    this.emit('get',req.url,req,res);
                    next();
                });
            this.app.post((req,res,next) => {
                    this.emit('post',req.url,req,res);
                    next();
                });
        })
        .static({
        })
        .fluent({
            addPath:function(type,path,f) {
                var key = Path.join(type,path);
                if(this.routes.has(key)) {
                    console.log("has path",key);
                    this.routes.get(key).concat(f._method);
                } else {
                    console.log("does not have",key);
                    this.routes.set(key,f);
                    this.app[type](path,(req,res,next) => {
                        console.log("executing",key);
                        this.routes.get(key)
                            .then(() => next())
                            .catch(next)
                            .startRequest(req,res)
                            .on("start",() => {
                            })
                            .on("end",() => {
                            })
                    });
                }
            },
            //expects HTTPRoute
            get:function(path,f) {
                return this.addPath("get",path,f);
            },
            post:function(path,f) {
                return this.addPath("post",path,f);
            },
            delete:function(path,f) {
                return this.addPath("delete",path,f);
            },
            use:function(path,f) {
                return this.addPath("use",path,f);
            },
            listen:function(port,f) {
                this._server = this.app.listen(port,f)
            }
        });
var x = new HttpServer();
var fooRoute = new HttpRoute();
x.get("*",fooRoute
      .serveFiles("./")
      .end())
    .listen(8080,function() {
        console.log("listening on port",8080)
    })

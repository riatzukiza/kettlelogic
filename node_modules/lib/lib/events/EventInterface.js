"use strict";
var createInterface = require("../interface.js").createInterface;
var Interface = require("../interface.js").Interface;
var obj = require("../wrappers/object.js");
var EventEmitter = require("events").EventEmitter;
var prom = require("../wrappers/promise.js");
function promisedMethod() {
    var args = [...arguments];
    var s = args.pop();
    var v = args.pop();

    return prom.resolve(v);
}
function eventedMethod() {
    var args = [...arguments];
    var s = args.pop();
    var v = args.pop();

    return prom.resolve(v)
        .then((x) => {
            return (this.emit(s,x,...args),x);
        })
        .catch((e) => {
            this.emit("error",e,args);
            throw e;
        });
}
var originalEmit = EventEmitter.prototype.emit;
function emit() {
    originalEmit.call(this,"*",...arguments);
    return originalEmit.call(this,...arguments);
}
var EventInterface = Interface
        .Constructor(function EventInterface(e) {
            this._emitter =
                (e instanceof EventEmitter ? e : new EventEmitter());
            this._emitter.emit = emit;
            this.bubbleTargets = [];
        })
        .fluent({
            on(name, f) {
                this._emitter.on(name, f);
            },
            once(name, f) {
                this._emitter.once(name, f);
            },
            emit(event) {
                this._emitter.emit(...arguments);
            },
            bubbleTo(emitter) {
                this.on("*", function() {
                    emitter.emit(...arguments);
                });
                this.bubbleTargets.push(emitter);
                return this;
            },
            handlers(h) {
                obj.mask(h)
                    .forEach((f,k) => this.on(k,f));
            }
        })
        .static({
            eventedMethod:function(name,fn) {
                return this
                    .methodsAfter({
                        [name]:fn
                    },eventedMethod);
            },
            evented:function(obj) {
                return this
                    .methodsAfter(obj,eventedMethod);
            }
        });
module.exports = EventInterface;

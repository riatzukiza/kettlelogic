var Interface = require("./Interface.js");
//notes for another level to the interface schema.
function createMonad(interface,cons,bind,methods) {
    var unit = interface
        .extend({
            bind:bind,
        },cons)
        .extend(methods||{})
        .methods.forEach((m,k) => unit.prototype[k] = function() {
            return this.bind(() => m.call(this,...arguments))
        })

    unit.extend = function(cons,methods) {
        return createMonad(cons,bind,methods,unit)
    }
    return unit;
}
var FancyInterface = Interface.extend({
    log(v) {
        console.log("arguments",...arguments);
        return v;
    }
})
var Identity = createMonad(FancyInterface,function(v) {
    this.value = v;
},function(f){
    this.value = f(this.value);
    return v;
})
var Maybe = Identity.extend(function(v) {
    if(v == null || typeof v === "undefined") {
        this.bind = function() {
            console.log("nothing here");
            return this;
        }
    } else {
        this.value = v;
    }
},function(f) {
    var v = f(this.value);
    if(v == null || typeof v === "undefined") {
        this.bind = function() {
            console.log("nothing here");
            return this;
        }
    } else {
        this.value = v;
    }
})

// Generated by LispyScript v1.0.0
var part = require("lib/lib/functional/partialApplication.js");
var prom = require("lib/lib/wrappers/promise.js");
var lib = require("lib");
var child_process = require("child_process");
var Path = require("path");
var fork = child_process.fork;
var Inode = require("lib/lib/filesystem/Inode.js");
var print = console.log.bind(console);
var defer = part["defer"];
var curry = part["curry"];
var maybe = (require("lib/lib/functional/logical.js")).maybe;

var handleExec = curry(function handleExec(s, f, e, stdout, stderr) {
    print(stderr.toString());
    return maybe.binary(function() {
        return f(e.stack);
    }, function() {
        return s(stdout.toString());
    }, e);
})
function exec(c) {
    return prom.create(function(success, fail) {
        return child_process.exec(c, handleExec(success, fail));
    });
}
function Monad(mv) {
    return function unit(mf) {
        return function bind() {
            return mf.call(bind,mv,...arguments);
        };
    };
}
function DoMonad() {
    var fns = [...arguments];
    return function(bind) {
        return ((fns).map(bind)).reduce(function(scope,m) {
            m(scope);
            return scope;
        },{});
    };
}
var child = fork("main.js");
var t;
function maybeRestart() {
    function exit(code) {
        console.log("exit code",code);
        if(code === null) {
            print("recompileing backend");
        } else {
            console.log("program closed with an error");
        }
    }

    clearTimeout(t);
    child.kill();
    t = setTimeout(function() {
        child = fork("main.js");
    },1500)
}
function restartApp(path) {
    var ext = Path.extname(path);
    print("bin file changed",path);
    return ((ext === ".js") ?
        (function() {
            return maybeRestart();
        })() :
        undefined);
}
function setWispCompile(dir, scope) {
    function compile(path) {
        console.log("checking if the file is a wisp file");
        var replacement = Path.basename(path,".wisp");
        replacement = Path.dirname(path) + "/"+ replacement + ".js";

        if ((Path.extname(path) === ".wisp")) {
            print("wisp file changed", path);
            print("wisp replacement file",replacement);
            exec("cat "+ path+ " | wisp > "+ replacement)
                .then(defer(console.log, ["successful compile"]))
                .catch(defer(console.log, ["compile fail"]));
        }
    }
    return dir.on("change", compile);
}

function setLispyCompile(dir, scope) {
    function compile(path) {
        var replacement = Path.basename(path,".ls");
        replacement = Path.dirname(path) + "/"+ replacement + ".js";

        if ((Path.extname(path) === ".ls")) {
            print("lispy file changed", path);
            print("lispy replacement file",replacement)
            exec("lispy " + path)
                .then(defer(console.log, ["successful compile"]))
                .catch(defer(console.log, ["compile fail"]));
        }
    }
    return dir.on("change", compile);
}
function watchInode(dir,scope) {
    console.log("watching inode");
    return dir.watch();
}
function listenForChanges(dir,scope) {
    return dir.on("change",restartApp);
}
console.log("WTF");
child.once("error",maybeRestart);
Inode.get("./bin")
    .then(Monad)
    .then(DoMonad(
        watchInode,
        setWispCompile,
        setLispyCompile,
        listenForChanges
    ));

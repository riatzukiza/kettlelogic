// Generated by LispyScript v1.0.0
var lib = require('lib');
var curry = lib.functional.partial.curry;
var defer = lib.functional.partial.defer;
var child_process = require("child_process");
var Path = require("path");
var fork = child_process.fork;
var Inode = lib.filesystem;
var print = console.log.bind(console);
function Monad(mv) {
    return function unit(mf) {
        return function bind() {
            return mf.call(bind,mv,...arguments);
        }
    }
}
function DoMonad() {
    var fns = [...arguments];
    return function(bind) {
        return ((fns).map(bind)).reduce(function(scope,m) {
            m(scope);
            return scope;
        },{});
    };
}
var child = fork("main.js");
function restartApp(path) {
    var ext = Path.extname(path);
    print("extension",ext);
    return ((ext === ".js") ?
        (function() {
            ((!child.exiting) ?
                child.once("exit",function() {
                    child = fork("main.js");
                }) :
                undefined);
            child.exiting = true;
            return setTimeout(function() {
                return child.kill();
            },1500);
        })() :
        undefined);
}
function watchInode(dir,scope) {
    return dir.watch();
}
function listenForChanges(dir,scope) {
    return dir.on("change",restartApp);
}
((Inode.get("./bin")).then(Monad)).then(DoMonad(listenForChanges,watchInode));
